// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  name      String
  number    String  @unique
  password  String
  OnRampTransaction OnRampTransaction[]
  balance   Balance[]
  sentTransfers     P2PTransfer[] @relation(name: "fromUserRelation")
  receivedTransfers P2PTransfer[] @relation(name: "toUserRelation")
}

model P2PTransfer {
  id          String @id @default(uuid())
  amount      Int
  timeStamp   DateTime
  fromUserId  String
  fromUser    User @relation(name: "fromUserRelation" ,fields: [fromUserId], references: [id])
  toUserId    String
  toUser      User @relation(name: "toUserRelation" ,fields: [toUserId], references: [id])
}

model Merchant {
  id        String  @id @default(uuid())
  email     String  @unique
  name      String
  auth_type AuthType
}


model OnRampTransaction {
  id        String  @id @default(uuid())
  status    OnRampStatus
  token     String  @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}


model Balance {
  id        String  @id @default(uuid())
  amount    Int
  locked    Int
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
}

enum AuthType {
  Google
  Github
  Facebook
}

enum OnRampStatus {
  Failure
  Success
  Processing
}